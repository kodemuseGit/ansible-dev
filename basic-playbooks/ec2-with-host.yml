---
- name: Create a sandbox instance
  hosts: localhost
  gather_facts: False
  connection: local
  
  vars:
    keypair: JenkinSetup
    instance_type: t2.nano
    ami: ami-0653e888ec96eab9b
    region: us-east-2
    security_group: demo-wizard
    aws_access_key: AKIAIIMYCIQBMUQVKJIQ
    aws_secret_key: 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
  tasks:
  
    - name: Create a security group
      ec2_group:
        name: "{{ security_group }}"
        description: The webservers security group
        region: "{{ region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
            
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
        
    - name: Launch instance
      ec2:
         aws_access_key: "{{ aws_access_key }}"
         aws_secret_key: "{{ aws_secret_key }}"
         key_name: "{{ keypair }}"
         group: "{{security_group}}"
         instance_type: "{{ instance_type }}"
         image: "{{ ami }}"
         wait: true
         region: "{{ region }}"
         count: 1  # default
         count_tag:
            Name: Demo
         instance_tags:
            Name: Demo
         vpc_subnet_id: subnet-6e775d06
         assign_public_ip: yes
      register: ec2
      
    - name: Add instance in host file
        add_host:
          name: "{{item.public_ip}}"
          groups: demoserver
      
    - name: Add tag to Instance(s)
      ec2_tag:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        resource: "{{ item.id }}"
        region: "{{ region }}"
        state: "present"
      with_items: "{{ ec2.instances }}"
      args:
        tags:
          Type: webserver    

